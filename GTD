#####-------------------------------------------------------------
##### This code is designed to collect Google Trends Data
#####   at a daily frequancy normalised throughout from 0 to
#####   100 from as close to the first of January 2004 (01-01-2004)
#####   to as close to the day the code is run for any search term.
#####-------------------------------------------------------------



####--------------------------------------------------------------
#### Introduction
####--------------------------------------------------------------
print("Welcome to the Comparable Worldwide Daily Google Trends Data Collector \n" +
      "Google Trends data is normalised from 0 to 100 with 100 representing the single highest search value." +
      "The issue is that Google only allows for daily data to be seen and collected in five 90 day windows," +
      "rendering it laborious to collect daily comparable data for any (maybe many) different search terms."+
      "This script will allow you to collect such comparable data for accademic purposes for any search term in an automated way.")



####--------------------------------------------------------------
#### User Input
####--------------------------------------------------------------

# Please input the search term that is wished to be looked up on Google Trends
SearchTerm = input("What search term would you like to get Google Trends for? E.g.: S&P 500\n")

# This is for testing:
#   If SearchTerm is empty because the user pressed 'ENTER', then it will automatically be 's&p 500' just as in my disertation
if (SearchTerm == ""):
    SearchTerm = "s&p 500"
else:
    pass


# Please input the file path to your webdriver
#   Note that it needs to be entered with '\\', not '/'
#   e.g.: C:\\Users\\johnf\\Documents\\Programs\\chromedriver.exe
webdriver_path = input("\nWhat is the directory of your Google Drive Selenium Webdriver?\n" +
                       "Note that it needs to be entered with '\\\\', not '/' \n")

# This is for testing:
#   If webdriver_path is empty because the user pressed 'ENTER', then it will automatically be 'C:\\Users\\johnf\\Documents\\Programs\\chromedriver.exe'
if (webdriver_path == ""):
    webdriver_path = "C:\\Users\\johnf\\Documents\\Programs\\chromedriver.exe"
else:
    pass

# Please input the file path to your Downloads folder
#   e.g.: C:\\Users\\johnf\\Downloads
UserDownloadFolderPath = input("\nPlease input the file path to your Downloads folder \n" +
                               "Please make sure that no file named 'multiTimeline.csv' are saved in tat location prior to answering\n" +
                               "If you do not have one, please find one under the link 'https://selenium-python.readthedocs.io/installation.html'\n" +
                               "Note that its path needs to be entered with '\\\\', not '/' or '\\'\n")

# This is for testing:
#   If UserDownloadFolderPath is empty because the user pressed 'ENTER', then it will automatically be 'C:\\Users\\johnf\\Downloads'
if (UserDownloadFolderPath == ""):
    UserDownloadFolderPath = "C:\\Users\\johnf\\Downloads"
else:
    pass




####--------------------------------------------------------------
#### Import Libraries
####--------------------------------------------------------------

# os is a library used to manipulate files on machines
import os

# time is a library that will allow us to force the program to slowdown when needed sometimes
import time

# datetime will allow us to determint what day it is today and get Google Trends Data from 2004 to today
import datetime
from datetime import date
from datetime import datetime as datet

# selenium is a library that allows for the manipulation of a web browzer
from selenium import webdriver

# The import bellow allows for us to enter keys (as in: from the keyboard) as comands (such as ENTER)
from selenium.webdriver.common.keys import Keys

# pandas will be needed to manipulate data sets
import pandas as pd




####--------------------------------------------------------------
#### Setup Functions
####--------------------------------------------------------------


# We will be able to manage folders with the following function
def create_folder_if_it_does_not_exist(folder_name):
    if not os.path.exists(str(os.path.dirname(__file__) +
                              "\\" + str(folder_name))):
        os.makedirs(str(os.path.dirname(__file__) +
                        "\\" + str(folder_name)))

def create_file_if_it_does_not_exist(file_name):
    if not os.path.isfile(str(os.path.dirname(__file__) +
                              "\\" + str(file_name))):
        file = open(str(file_name),'w+')
        file.close()


# The values in our pandas dataframes will be quite long, so the bellow will cash themin whole
pd.options.display.max_colwidth = 100

def SeleniumClick(path):
    browser.find_element_by_xpath(path).click()

def SeleniumClickAndWait(path, wait):
    browser.find_element_by_xpath(path).click()
    time.sleep(wait)


def TimePeriodSearch(path1, path2, path3, path4, path5, path6, Date1, Date2, path7):
    SeleniumClickAndWait(path1, 1.6)
    SeleniumClickAndWait(path2, 0.9)
    SeleniumClickAndWait(path3, 0.9)
    SeleniumClickAndWait(path4, 2)

    field1 = browser.find_element_by_xpath(path5)
    field2 = browser.find_element_by_xpath(path6)
    field1.clear()
    field2.clear()
    field1.send_keys(Date1)
    field2.send_keys(Date2)
    field1.clear()
    field1.send_keys(Date1)
    field2.clear()
    field2.send_keys(Date2)
    time.sleep(1)

    
    SeleniumClick(path7)
    time.sleep(2)


def QuarterSearch(Path1No, Path2No, Path4No, QStart, QEnd): 
    TimePeriodSearch(path1 = str('/html/body/div[2]/div[2]/div/header/div/div[3]/ng-transclude/div[6]/explore-pills/div/div[' +
                                 str(Path1No) +
                                 ']/explore-search-term/div/md-menu/div[1]/md-icon'),
                     path2 = str('/html/body/div[' +
                                 str(Path2No) +
                                 ']/md-menu-content/md-menu-item[3]/button'),
                     path3 = '/html/body/div[2]/div[4]/md-dialog/div/div[1]/div[3]/custom-date-picker/ng-include/md-select/md-select-value/span[1]/div',
                     path4 = str('/html/body/div['
                                 + str(Path4No) +
                                 ']/md-select-menu/md-content/md-option[11]/div[1]'),
                     path5 = '/html/body/div[2]/div[4]/md-dialog/md-tabs/md-tabs-content-wrapper/md-tab-content[1]/div/md-content/form/div[1]/md-datepicker/div[1]/input',
                     path6 = '/html/body/div[2]/div[4]/md-dialog/md-tabs/md-tabs-content-wrapper/md-tab-content[1]/div/md-content/form/div[2]/md-datepicker/div[1]/input',
                     Date1 = QStart,
                     Date2 = QEnd,
                     path7 = '/html/body/div[2]/div[4]/md-dialog/md-dialog-actions/button[2]')


def QuarterSearchLessFirstStep(Path2No, Path4No, QStart, QEnd): 
    SeleniumClickAndWait(str('/html/body/div[' +
                                 str(Path2No) +
                                 ']/md-menu-content/md-menu-item[3]/button'),
                         0.9)
    SeleniumClickAndWait('/html/body/div[2]/div[4]/md-dialog/div/div[1]/div[3]/custom-date-picker/ng-include/md-select/md-select-value/span[1]/div',
                         0.9)
    SeleniumClickAndWait(str('/html/body/div['
                                 + str(Path4No) +
                                 ']/md-select-menu/md-content/md-option[11]/div[1]'),
                         2)

    field1 = browser.find_element_by_xpath('/html/body/div[2]/div[4]/md-dialog/md-tabs/md-tabs-content-wrapper/md-tab-content[1]/div/md-content/form/div[1]/md-datepicker/div[1]/input',)
    field2 = browser.find_element_by_xpath('/html/body/div[2]/div[4]/md-dialog/md-tabs/md-tabs-content-wrapper/md-tab-content[1]/div/md-content/form/div[2]/md-datepicker/div[1]/input',)
    field1.clear()
    field2.clear()
    field1.send_keys(Date1)
    field2.send_keys(Date2)
    field1.clear()
    field1.send_keys(Date1)
    time.sleep(1)

    SeleniumClick('/html/body/div[2]/div[4]/md-dialog/md-dialog-actions/button[2]')
    time.sleep(2)




####--------------------------------------------------------------
#### Setting up error managment folders and text files
####--------------------------------------------------------------

# Create the folder in which we will have our error management log
create_folder_if_it_does_not_exist("Error_Checks")

# Create our error managemtn log
create_file_if_it_does_not_exist("Error_Checks\\Selenium Google Trends Error Checks.txt")

# Append the text file with new log
file = open("Error_Checks\\Selenium Google Trends Error Checks.txt",'a')
file.write("\nLast started to run on " + str(datetime.datetime.now()) + "\n")
file.close()



####--------------------------------------------------------------
#### Setting up dates
####--------------------------------------------------------------

# Setup variables
DateNowDTS = datetime.datetime.now() - datetime.timedelta(days = 31) # For ease, DTS here means 'DateTimeSytax'. Also: Google doesn't allow daily data collected up to today, but only up to last month (which is a maximum of 31 days).
DateLapseDTS = datetime.timedelta(days = 90) # Google Trends offers daily data points if asked for results within a time window of 90 days
OneDayDTS = datetime.timedelta(days = 1)

# The line bellow shows the number of 90 day time windows within our full time sample
NTimeWindows = (abs(DateNowDTS - datetime.datetime(2004, 1, 1)).days) / 90 # The -1 is a nessesary precaution so that our script doesn't request of Google Trends values from before 01/01/2004.


## Start loop to create list of starting and ending dates of each time window for which Google Trends data is collected

ListStartDatesDTS = list(range(0, int(NTimeWindows)))
ListEndDatesDTS = list(range(0, int(NTimeWindows)))
ListStartDates = list(range(0, int(NTimeWindows)))
ListEndDates = list(range(0, int(NTimeWindows)))

for i in list(range(0, int(NTimeWindows))):
    if (i == 0):
        ListEndDatesDTS[i] = DateNowDTS
        ListStartDatesDTS[i] = ListEndDatesDTS[i] - DateLapseDTS
        ListEndDates[i] = ListEndDatesDTS[i].strftime('%m/%d/%Y')
        ListStartDates[i] = ListStartDatesDTS[i].strftime('%m/%d/%Y')
    else:
        ListEndDatesDTS[i] = ListStartDatesDTS[i - 1] - OneDayDTS
        ListStartDatesDTS[i] = ListEndDatesDTS[i] - DateLapseDTS
        ListEndDates[i] = ListEndDatesDTS[i].strftime('%m/%d/%Y')
        ListStartDates[i] = ListStartDatesDTS[i].strftime('%m/%d/%Y')
        



####--------------------------------------------------------------
#### Get Google Trends Data Files
####--------------------------------------------------------------


###--------------------------------------------------------------
### Get First Data File
###--------------------------------------------------------------


# The following is a (non fool proof) way to make sure there isn't a 'multiTimeline.csv' file in the user's downloads folder
if os.path.isfile(str(UserDownloadFolderPath + "\\multiTimeline.csv")):
    os.rename(str(UserDownloadFolderPath + "\\multiTimeline.csv"),
              str(UserDownloadFolderPath + "\\multiTimeline before " + str(DateNowDTS) + ".csv"))


# Google Trends' download file url changes constantly, but the one to Google Trend's search page does not. We thus try to have a download url from the search page using a bot via 'Selenium'.
#   Example of url to Google Trends that works (not link to the downloading file):
#       'https://trends.google.com/trends/explore?date=2004-01-01%202004-03-31,2004-04-01%202004-06-30,2004-07-01%202004-09-29,2004-09-30%202004-12-29,2004-12-30%202005-03-30&geo=,,,,&q=s%26p%20500,s%26p%20500,s%26p%20500,s%26p%20500,s%26p%20500'
url1 = str('https://trends.google.com/trends/explore?date=2004-01-01%202004-03-31,2004-04-01%202004-06-30,2004-07-01%202004-09-29,2004-09-30%202004-12-29,2004-12-30%202005-03-30&geo=,,,,&q=s%26p%20500,s%26p%20500,s%26p%20500,s%26p%20500,s%26p%20500')

# Start up browser
browser = webdriver.Chrome(executable_path=webdriver_path)

# Go to the url in question
browser.get(url1)

# It has to be done twice due to Google restrictions
browser.get(url1)


## First five 90 day time periods' search

# Search for the propper term
for i in range(1, 6):
    SeleniumClick(str('/html/body/div[2]/div[2]/div/header/div/div[3]/ng-transclude/div[6]/explore-pills/div/div[' + str(i) + ']'))
    field = browser.find_element_by_xpath(str('/html/body/div[2]/div[2]/div/header/div/div[3]/ng-transclude/div[6]/explore-pills/div/div[' + str(i) + ']/explore-search-term/div/ng-include/md-autocomplete/md-autocomplete-wrap/input'))
    field.send_keys(SearchTerm)
    field.send_keys(Keys.ENTER)

time.sleep(5)

# Search for the propper quarters
for i in range(1,6): # Remember that the range() function is exclusive of its upper limit; range(1,6) thus goes from 1 to 5.
    QuarterSearch(i, (5 + i), (5 + i),
                  ListStartDates[i - 1], ListEndDates[i - 1])
    time.sleep(2)

time.sleep(2)

# Dowload first CSV
SeleniumClick('/html/body/div[2]/div[2]/div/md-content/div/div/div[1]/trends-widget/ng-include/widget/div/div/div/widget-actions/div/button[1]/i')

time.sleep(5)


## Setup downloads file

# Create the folder in which we will have our error management log
create_folder_if_it_does_not_exist(str("Google_Trends_Downloads_for_'" +
                                   str(SearchTerm) + "'_on_" +
                                   str(datetime.datetime.now())[0:10]))

SeleniumDownloadsFolder = str("Google_Trends_Downloads_for_'" +
                                   str(SearchTerm) + "'_on_" +
                                   str(datetime.datetime.now())[0:10])


# Move downloaded file from the Downloads folder to the aimed folder
#   Note that the download folder preference on Selenuim's chrome browser doesn't work any more, and that file paths thus have to be entered manually
os.rename(UserDownloadFolderPath + r'\multiTimeline.csv',
          SeleniumDownloadsFolder +
          r'\file_can_be_deleted_after_script_ran_1.csv')

time.sleep(1.5)



###--------------------------------------------------------------
### Get Normalising Quarter
###--------------------------------------------------------------


# Read downloaded file into memory
df = pd.read_csv(str(str(SeleniumDownloadsFolder) +
                     r'\file_can_be_deleted_after_script_ran_1.csv'),
                 header = 1)


## Find the Quarter with '100'

for i in range(0, 91): # this range() function is exclusinve with respect to its upper limit, i.e.: only reaches 90
    for j in range(1, 10, 2): # 'range(1, 10, 2)' goes from 1 to 10 in steps of 2
        if (df.iloc[i, j] == 100): # In the pandas library, the 'iloc' function allows us to get the value in a specified row (a.k.a: index) and culumn (iloc[index,column]).
            NormalisationDateStart = str(df.iloc[0, (j-1)]).replace('-', '/')
            NormalisationDateEnd = str(df.iloc[90, (j-1)]).replace('-', '/')
        else:
            pass

for i in list(range(0, int(NTimeWindows))):
    if (ListStartDates[i] == datet.strptime(NormalisationDateStart, '%Y/%m/%d').strftime('%m/%d/%Y')):
        NormalisingQuarter = i
    else:
        pass

# The bellow 'try' loop will allow us to collect data as far back as possible
try:
    # The for loop bellow will allow us to find the quarter with the heighest hit. We will then be a ble to normalise all our data according to it.
    for m in range(5, (int(NTimeWindows) - 4), 4):
        
        # Fetch Google Trends Data with that Normilising Quarter and the next set of quarters
        QuarterSearch(1, 10, 10, ListStartDates[NormalisingQuarter], ListEndDates[NormalisingQuarter])
        time.sleep(2)

        for i,k in zip((5,6,7,8), range(m, (m+4))):
            QuarterSearch((i - 3), 10, 10, ListStartDates[k], ListEndDates[k])
            time.sleep(2)

        time.sleep(2)
        
        # Dowload first CSV
        SeleniumClick('/html/body/div[2]/div[2]/div/md-content/div/div/div[1]/trends-widget/ng-include/widget/div/div/div/widget-actions/div/button[1]/i')

        time.sleep(5)

        # Move downloaded file from the Downloads folder to the aimed folder
        os.rename(UserDownloadFolderPath + r'\multiTimeline.csv',
                  str(str(SeleniumDownloadsFolder) + r'\file_can_be_deleted_after_script_ran_' + str(int((1 + m/4))) + r'.csv'))

        time.sleep(2)

        # Read downloaded file into memory
        df = pd.read_csv(str(str(SeleniumDownloadsFolder) + r'\file_can_be_deleted_after_script_ran_' + str(int((1 + m/4))) + r'.csv'),
                             header = 1)


        # Find the Quarter with '100'
        for i in range(0, 91):
            for j in range(1, 10, 2):
                if (df.iloc[i, j] == 100):
                    NormalisationDateStart = str(df.iloc[0, (j-1)]).replace('-', '/')
                    NormalisationDateEnd = str(df.iloc[90, (j-1)]).replace('-', '/')
                else:
                    pass

        for i in list(range(0, int(NTimeWindows))):
            if (ListStartDates[i] == datet.strptime(NormalisationDateStart, '%Y/%m/%d').strftime('%m/%d/%Y')):
                NormalisingQuarter = i
            else:
                pass

except:

    # Append the text file with new log
    file = open("Error_Checks\\Selenium Google Trends Error Checks.txt",'a')
    file.write("On the 'Get Normalising Quarter' step, the script encountered an error:\n" +
               str(Exception) + "\n")
    file.close()
    
    datet.strptime(df.iloc[0, 8], '%Y-%m-%d').strftime('%m/%d/%Y')
    



###--------------------------------------------------------------
### Get Normalised Data Files
###--------------------------------------------------------------

# The bellow 'try' loop will allow us to collect data as far back as possible
try:
    for m in range(0, int(NTimeWindows) - 4, 4):
        
        # Fetch Google Trends Data with that Normalising Quarter and the next set of quarters

        try:
            
            QuarterSearch(1, 10, 10, ListStartDates[NormalisingQuarter], ListEndDates[NormalisingQuarter])
            time.sleep(2)

            for i,k in zip((5,6,7,8), range(m, (m+4))):
                QuarterSearch((i - 3), 10, 10, ListStartDates[k], ListEndDates[k])
                time.sleep(2)
                
        except:
            
            QuarterSearchLessFirstStep(7, 7, ListStartDates[NormalisingQuarter], ListEndDates[NormalisingQuarter])
            time.sleep(2)
            
            for i,k in zip((5,6,7,8), range(m, (m+4))):
                QuarterSearch((i - 3), 7, 7, ListStartDates[k], ListEndDates[k])
                time.sleep(2)

        time.sleep(2)
        
        # Dowload CSV
        SeleniumClick('/html/body/div[2]/div[2]/div/md-content/div/div/div[1]/trends-widget/ng-include/widget/div/div/div/widget-actions/div/button[1]/i')

        time.sleep(5)

        # Move downloaded file from the Downloads folder to the aimed folder
        os.rename(UserDownloadFolderPath + r"\multiTimeline.csv",
                  str(str(SeleniumDownloadsFolder) + r"\Worldwide_Search_for_'" + SearchTerm + r"'_" + str(int((1 + m/4))) + r".csv"))

        time.sleep(2)
        
except:

    # Append the text file with new log
    file = open("Error_Checks\\Selenium Google Trends Error Checks.txt",'a')
    file.write("On the 'Get Normalised Data Files' step, the script encountered an error:\n" +
               str(Exception) + "\n")
    file.close()

# Close the browser
# browser.close()
# Close the browser driver
# browser. quit()



###--------------------------------------------------------------
### Produce Final Data File
###--------------------------------------------------------------

MaxFileNumber = int(1 + m/4)

df = pd.DataFrame(index=range(91 * 4 * MaxFileNumber), columns=["Date", "Worldwide_Google_Trends_Searches_for_'" + SearchTerm + "'"])

for i in range(1, MaxFileNumber):
    TempDF = pd.read_csv(str(str(SeleniumDownloadsFolder) +
                             r"\Worldwide_Search_for_'" +
                             SearchTerm + r"'_" +
                             str(i) + r'.csv'),
                     header = 1)

    ## Populate df
    for n in range(1, 5): # Remember that 'range()' is upper limit exclusive such that range(1, 5) goes from 1 to 4.
        for j in range(0, 91):
            df.iloc[ ((i-1) * (91*4)) + ((91 * (n-1)) + j) , 0 ] = TempDF.iloc[ (90 - j), 2*n ]
            df.iloc[ ((i-1) * (91*4)) + ((91 * (n-1)) + j) , 1 ] = TempDF.iloc[ (90 - j), (1 + n*2) ]

# Delete rows with 'nan' values. Those appeared as too many rows were created in 'df' on puropose to insure no errors in the 'for i' loop above.
df = df.dropna()

# Produce a CSV with the data
df.to_csv(str("Google_Trends_Worldwide_Search_for_'" + SearchTerm + "'" + r'.csv'))



